AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VPCCidrBlock:
    Description: VPC CIDR block.
    Type: String
  ImageId:
    Description: Image ID for the EC2 instance.
    Type: String
  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: 'The IP address range that can be used to access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Outputs:
  BastionHost1a:
    Description: Bastion Host 1a Public IP
    Value: !GetAtt BastionHost1a.PublicIp
  BastionHost1b:
    Description: Bastion Host 1b Public IP
    Value: !GetAtt BastionHost1b.PublicIp
Resources:
  VPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'VPC1'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VPCCidrBlock
  PublicSubnet1a:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnet1a'
      VpcId: !Ref VPC1
      AvailabilityZone:
        Fn::Select: # Select first availability zone for this region (us-east-1a, us-west-1a, etc.)
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC1.CidrBlock, 256, 8 ]] # Select first subnet (e.g. 10.1.1.0/24)
      MapPublicIpOnLaunch: 'true'
  PrivateSubnet1a:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnet1a'
      VpcId: !Ref VPC1
      AvailabilityZone:
        Fn::Select: # Select first availability zone for this region (us-east-1a, us-west-1c, etc.)
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC1.CidrBlock, 256, 8 ]] # Select second subnet (e.g. 10.1.2.0/24)
      MapPublicIpOnLaunch: 'false'
  PublicSubnet1b:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnet1b'
      VpcId: !Ref VPC1
      AvailabilityZone:
        Fn::Select: # Select second availability zone for this region (us-east-1b, us-west-1c, etc.)
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC1.CidrBlock, 256, 8 ]] # Select third subnet (e.g. 10.1.3.0/24)
      MapPublicIpOnLaunch: 'true'
  PrivateSubnet1b:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnet1b'
      VpcId: !Ref VPC1
      AvailabilityZone:
        Fn::Select: # Select second availability zone for this region (us-east-1b, us-west-1b, etc.)
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC1.CidrBlock, 256, 8 ]] # Select fourth subnet (e.g. 10.1.4.0/24)
      MapPublicIpOnLaunch: 'false'
  InternetGateway1:
    Type: 'AWS::EC2::InternetGateway'
  VPCGatewayAttachment1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway1
      VpcId: !Ref VPC1
  PublicRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'PublicRouteTable1'
      VpcId: !Ref VPC1
  PublicRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref PublicRouteTable1
      GatewayId: !Ref InternetGateway1
  PublicSubnetRouteTableAssociation1a:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1a
  PublicSubnetRouteTableAssociation1b:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1b
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'PrivateRouteTable1'
      VpcId: !Ref VPC1
  PrivateSubnetRouteTableAssociation1a:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1a
  PrivateSubnetRouteTableAssociation1b:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PrivateSubnet1b
  BastionHostSecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: Allow access  SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
  BastionHost1a:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'BastionHost1a'
      InstanceType: 't2.micro'
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - GroupSet:
            - !Ref BastionHostSecurityGroup1
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1a
  BastionHost1b:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'BastionHost1b'
      InstanceType: 't2.micro'
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - GroupSet:
            - !Ref BastionHostSecurityGroup1
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1b
  PrivateInstanceSecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: Allow access  SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          Description: 'Allow SSH access from bastion hosts'
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup1
  PrivateInstance1a:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'PrivateInstance1a'
      InstanceType: 't2.micro'
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - GroupSet:
            - !Ref PrivateInstanceSecurityGroup1
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet1a
  PrivateInstance1b:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'PrivateInstance1b'
      InstanceType: 't2.micro'
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - GroupSet:
            - !Ref PrivateInstanceSecurityGroup1
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet1b
